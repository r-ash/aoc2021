// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// count_increases
int count_increases(std::vector<int> values);
RcppExport SEXP _aoc2021_count_increases(SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(count_increases(values));
    return rcpp_result_gen;
END_RCPP
}
// window_increases
int window_increases(std::vector<int> values);
RcppExport SEXP _aoc2021_window_increases(SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(window_increases(values));
    return rcpp_result_gen;
END_RCPP
}
// total_distance
int total_distance(std::vector<std::string> commands);
RcppExport SEXP _aoc2021_total_distance(SEXP commandsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type commands(commandsSEXP);
    rcpp_result_gen = Rcpp::wrap(total_distance(commands));
    return rcpp_result_gen;
END_RCPP
}
// total_distance_2
int total_distance_2(std::vector<std::string> commands);
RcppExport SEXP _aoc2021_total_distance_2(SEXP commandsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type commands(commandsSEXP);
    rcpp_result_gen = Rcpp::wrap(total_distance_2(commands));
    return rcpp_result_gen;
END_RCPP
}
// model_fish
std::vector<int> model_fish(std::vector<int> fish, int days);
RcppExport SEXP _aoc2021_model_fish(SEXP fishSEXP, SEXP daysSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type fish(fishSEXP);
    Rcpp::traits::input_parameter< int >::type days(daysSEXP);
    rcpp_result_gen = Rcpp::wrap(model_fish(fish, days));
    return rcpp_result_gen;
END_RCPP
}
// run_day
std::vector<int> run_day(std::vector<int> fish);
RcppExport SEXP _aoc2021_run_day(SEXP fishSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type fish(fishSEXP);
    rcpp_result_gen = Rcpp::wrap(run_day(fish));
    return rcpp_result_gen;
END_RCPP
}
// count_fish
int count_fish(std::vector<int> fish, int days);
RcppExport SEXP _aoc2021_count_fish(SEXP fishSEXP, SEXP daysSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type fish(fishSEXP);
    Rcpp::traits::input_parameter< int >::type days(daysSEXP);
    rcpp_result_gen = Rcpp::wrap(count_fish(fish, days));
    return rcpp_result_gen;
END_RCPP
}
// count_fish_class
long count_fish_class(std::vector<int> fish, int days);
RcppExport SEXP _aoc2021_count_fish_class(SEXP fishSEXP, SEXP daysSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type fish(fishSEXP);
    Rcpp::traits::input_parameter< int >::type days(daysSEXP);
    rcpp_result_gen = Rcpp::wrap(count_fish_class(fish, days));
    return rcpp_result_gen;
END_RCPP
}
// position_cost
int position_cost(std::vector<int> positions, int alignment_position);
RcppExport SEXP _aoc2021_position_cost(SEXP positionsSEXP, SEXP alignment_positionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type positions(positionsSEXP);
    Rcpp::traits::input_parameter< int >::type alignment_position(alignment_positionSEXP);
    rcpp_result_gen = Rcpp::wrap(position_cost(positions, alignment_position));
    return rcpp_result_gen;
END_RCPP
}
// optimal_position
int optimal_position(std::vector<int> positions);
RcppExport SEXP _aoc2021_optimal_position(SEXP positionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type positions(positionsSEXP);
    rcpp_result_gen = Rcpp::wrap(optimal_position(positions));
    return rcpp_result_gen;
END_RCPP
}
// position_cost_2
int position_cost_2(std::vector<int> positions, int alignment_position);
RcppExport SEXP _aoc2021_position_cost_2(SEXP positionsSEXP, SEXP alignment_positionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type positions(positionsSEXP);
    Rcpp::traits::input_parameter< int >::type alignment_position(alignment_positionSEXP);
    rcpp_result_gen = Rcpp::wrap(position_cost_2(positions, alignment_position));
    return rcpp_result_gen;
END_RCPP
}
// optimal_position_2
int optimal_position_2(std::vector<int> positions);
RcppExport SEXP _aoc2021_optimal_position_2(SEXP positionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type positions(positionsSEXP);
    rcpp_result_gen = Rcpp::wrap(optimal_position_2(positions));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_aoc2021_count_increases", (DL_FUNC) &_aoc2021_count_increases, 1},
    {"_aoc2021_window_increases", (DL_FUNC) &_aoc2021_window_increases, 1},
    {"_aoc2021_total_distance", (DL_FUNC) &_aoc2021_total_distance, 1},
    {"_aoc2021_total_distance_2", (DL_FUNC) &_aoc2021_total_distance_2, 1},
    {"_aoc2021_model_fish", (DL_FUNC) &_aoc2021_model_fish, 2},
    {"_aoc2021_run_day", (DL_FUNC) &_aoc2021_run_day, 1},
    {"_aoc2021_count_fish", (DL_FUNC) &_aoc2021_count_fish, 2},
    {"_aoc2021_count_fish_class", (DL_FUNC) &_aoc2021_count_fish_class, 2},
    {"_aoc2021_position_cost", (DL_FUNC) &_aoc2021_position_cost, 2},
    {"_aoc2021_optimal_position", (DL_FUNC) &_aoc2021_optimal_position, 1},
    {"_aoc2021_position_cost_2", (DL_FUNC) &_aoc2021_position_cost_2, 2},
    {"_aoc2021_optimal_position_2", (DL_FUNC) &_aoc2021_optimal_position_2, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_aoc2021(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
